"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
test('Transform decorator', () => {
    let User = class User {
        constructor(model) {
            this.locations = [];
        }
    };
    __decorate([
        index_1.Transform({ fn: (model, field) => model[field] && model[field].split(',') }),
        __metadata("design:type", Array)
    ], User.prototype, "locations", void 0);
    User = __decorate([
        index_1.Entity(),
        __metadata("design:paramtypes", [Object])
    ], User);
    const model = { locations: 'VNM,HKG' };
    const user = new User(model);
    expect(user.locations.length).toBe(2);
    expect(user.locations.includes('VNM')).toBe(true);
    expect(user.locations.includes('HKG')).toBe(true);
    expect(typeof model.locations).toBe('string');
});
test('Check compatibility of Transform, SafeType decorator', () => {
    let Location = class Location {
        constructor(model) {
            this.code = '';
            this.getLocation = () => `My location is ${this.code}`;
        }
    };
    Location = __decorate([
        index_1.Entity(),
        __metadata("design:paramtypes", [Object])
    ], Location);
    let User = class User {
        constructor(model) {
            this.locations = [];
        }
    };
    __decorate([
        index_1.Transform({
            fn: (model, field) => model[field] &&
                model[field].split(',').map((code) => ({
                    code,
                })),
        }),
        index_1.SafeType({ type: Location }),
        __metadata("design:type", Array)
    ], User.prototype, "locations", void 0);
    User = __decorate([
        index_1.Entity(),
        __metadata("design:paramtypes", [Object])
    ], User);
    const user = new User({ locations: 'VNM,HKG' });
    expect(user.locations[0].code).toBe('VNM');
    expect(user.locations[1].getLocation()).toBe('My location is HKG');
});
